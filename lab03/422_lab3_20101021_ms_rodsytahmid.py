# -*- coding: utf-8 -*-
"""422_lab3_20101021_Ms RodsyTahmid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZVNoWaztXuxUABNnHIdyH7aoNqFe0mjr
"""

Sample Input 1
7
l 120
l 289
d 475
l 195
d 6482
l 160
d 935

Sample Input 2

5
l 100
l 450
d 500
l 7923
d 9055

from pickle import FALSE, TRUE
import random as r

#################
#USER INPUT
#################

# taking number of populations

population = -1
population_accepted = FALSE

while (population < 1 or population > 10 ** 2) and population_accepted == FALSE:

    population = int(input())

    if population >= 1 and population <= 10**2:
        population_accepted = TRUE

    else:
        print('invalid number. N( 1 ≤ N ≤ 10^2 )')

pos_accepted = FALSE

# taking population values
populations_input = []

for i in range(population):

    pos_accepted = FALSE

    while pos_accepted == FALSE:

        combination = input().replace(' ', '')

        if combination[0] == 'l':

            pos = 0 - int(combination[1:])
            populations_input.append(pos)
            pos_accepted = TRUE

        elif combination[0] == 'd':

            pos = 0 + int(combination[1:])
            populations_input.append(pos)
            pos_accepted = TRUE

        else:
            print('wrong input, give again')
            pos_accepted = FALSE


#####################################################
# if all inputs are fine then start Genetic Algorithm
#####################################################

if(pos_accepted == TRUE):

    population_amount = population
    populations = populations_input

    # fitness_function
    def fitness_function(populations, total_genome, genome_length, people):

        # counting sum for each genome
        for i in range(total_genome):

            fitness = 0

            for j in range(genome_length):

                if people[i][0][j] == '1':

                    #print(count, '+', populations[j], '= ')
                    fitness = fitness+int(populations[j])

            # store the sum of that genome as fitness
            people[i][1] = fitness

    result_in = FALSE
    run_time = 0

    while result_in == FALSE and run_time < 10000:

        ################################
        # generate initial people
        ################################

        # will create 'total_genome' number of genomes
        total_genome = 60
        people = [[]]

        for i in range(total_genome):

            genome = ''
            genome_checker = False

            # if genome isn't appropriate then make again
            while(genome_checker == False):

                # create genome where length = population_amount
                for j in range(population_amount):

                    genome = genome+(str(r.randint(0, 1)))

                # check if it's acceptable add in people
                # at least two 1 is mandatory
                if(genome.count('1') < 2):

                    genome = ''
                    genome_checker = False

                else:

                    people[i].append(genome)
                    genome_checker = True

                    if (i < total_genome-1):
                        people.append([])

        #######################
        # Fitness calculation
        #######################

        for i in range(total_genome):

            people[i].append(int(0))

        fitness_function(populations, total_genome,
                         population_amount, people)

        #######################
        # Parent selection
        #######################

        # sort people by fitness

        people.sort(key=lambda s: s[1])

        # collecting 1/2 genomes as parent from sorted people

        parents = [[]]

        end_collection = int(total_genome/2)

        parents = people[0:end_collection]

        #######################
        # Crossover
        #######################

        child_people = [[]]

        # swap two random positions

        row_indx = 0

        for i in range(int(len(parents)/2)):

            for j in range(2):

                # select a random position
                index_swapping = r.randint(0, population_amount - 1)

                # store the character of that position
                temp = str(parents[row_indx][0][index_swapping])

                # swaping the character with it's next row
                parents[row_indx][0] = parents[row_indx][0][:index_swapping] + \
                                       str(parents[row_indx + 1][0][index_swapping]) + \
                                       parents[row_indx][0][index_swapping + 1:]

                # swaping the next parent's position which belongs to the next row
                parents[row_indx + 1][0] = parents[row_indx + 1][0][:index_swapping] + \
                                           str(temp) + parents[row_indx + 1][0][index_swapping + 1:]

            row_indx = row_indx + 2

        child_people = parents

        #######################
        # Mutation
        #######################

        for i in range(len(child_people)):

            # select a random position
            index_muted = r.randint(0, population_amount - 1)

            child_people[i][0] = child_people[i][0][:index_muted] + \
                                 str(r.randint(0, 1)) + \
                                 child_people[i][0][index_muted + 1:]

        ###########################################
        # Fitness calculation of new population
        ###########################################

        fitness_function(populations, len(child_people),
                         population_amount, child_people)

        ###########################################
        # Check if ans exist in new people
        ###########################################

        To_iterate = 0

        while result_in == FALSE and To_iterate < int(len(child_people)):

            if child_people[To_iterate][1] == 0:

                if(child_people[To_iterate][0].count('1') >= 2):

                    #print('ANS: ', child_people[To_iterate])
                    print(child_people[To_iterate][0])

                    result_in = TRUE

            To_iterate = To_iterate + 1

        run_time = run_time+1

    if result_in == FALSE:

        #print('Total run time = ',run_time)
        #print('ANS NOT FOUND: -1')
        print('-1')


else:

    print('Input given is wrong')